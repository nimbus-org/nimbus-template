<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server PUBLIC
  "-//Nimbus//DTD Nimbus 1.0//JA"
  "http://nimbus.sourceforge.jp/dtd/nimbus-service_1_0.dtd">

<server>
    
    <default-log>
        <debug output="false"/>
        <information output="false"/>
        <warning output="true"/>
        <error output="true"/>
        <fatal output="true"/>
    </default-log>

    <manager name="Template.Service.ThreadContext">

<!--=======================================================================
リクエスト情報を管理するスレッドコンテキスト
========================================================================-->
        <!-- 複数のコンテキスト情報をグルーピングして、参照専用のコンテキスト情報を提供するコンテキストサービス -->
        <service name="Context"
                 code="jp.ossc.nimbus.service.context.GroupContextService"
                 instance="template">
            <attribute name="ContextServiceNames">
                #ThreadContext
                #ServerInfo
            </attribute>
            <depends>ThreadContext</depends>
            <depends>ServerInfo</depends>
        </service>

        <!-- スレッド単位のコンテキスト情報を提供するコンテキストサービス -->
        <service name="ThreadContext"
                 code="jp.ossc.nimbus.service.context.ThreadContextService"
                 instance="template">
            <attribute name="REQUEST_ID">UNKNOWN</attribute>
        </service>

        <!-- サーバ情報を静的コンテキスト情報として提供するコンテキストサービス -->
        <service name="ServerInfo"
                 code="jp.ossc.nimbus.service.context.ServerInfoService"
                 instance="template"/>
    </manager>

    <manager name="Template.Service.Context.SharedContext">

        <!-- サーバを跨ってデータを共有するSharedContextサービス -->
        <service name="SharedContext"
                 code="jp.ossc.nimbus.service.context.SharedContextService"
                 instance="template">

            <service-property name="Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME" extends="true">#RequestConnectionFactory</service-property>
            <service-property name="Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME" extends="true">#Cluster</service-property>
            <service-property name="Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME">#TransactionManager</service-property>
            <service-property name="Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME">#CacheMap</service-property>
            <service-property name="Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME">#CacheMap</service-property>
            <service-property name="Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME">#Interpreter</service-property>
            <service-property name="Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME">#ExecuteQueue</service-property>
            <service-property name="Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME">#ContextStore</service-property>

<ifdef name="Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME">
            <!-- コンテキスト情報の変更を送受信するRequestConnectionFactoryサービスのサービス名を設定する -->
            <attribute name="RequestConnectionFactoryServiceName">${Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME">
            <!-- コンテキスト情報の共有を管理するClusterサービスのサービス名を設定する -->
            <attribute name="ClusterServiceName">${Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME">
            <!-- コンテキスト情報のトランザクションを管理するSharedContextTransactionManagerサービスのサービス名を設定する -->
            <attribute name="SharedContextTransactionManagerServiceName">${Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME">
            <!-- クライアントモードの時に、データをキャッシュするCacheMapサービスのサービス名を設定する -->
            <attribute name="ClientCacheMapServiceName">${Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME">
            <!-- サーバモードの時に、データをキャッシュするCacheMapサービスのサービス名を設定する -->
            <attribute name="ServerCacheMapServiceName">${Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME">
            <!-- スクリプトを実行するInterpreterサービスのサービス名を設定する -->
            <attribute name="InterpreterServiceName">${Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME">
            <!-- スクリプトを実行要求受付Queueサービスのサービス名を設定する -->
            <attribute name="ExecuteQueueServiceName">${Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME">
            <!-- 永続化を行うContextStoreサービスのサービス名を設定する -->
            <attribute name="ContextStoreServiceName">${Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME}</depends>
</ifdef>
            
            <attribute name="ForcedLockTimeoutCheckInterval">5000</attribute>
        </service>

        <!-- サーバを跨ってデータを分散共有するSharedContextサービス -->
        <service name="DistributedSharedContext"
                 code="jp.ossc.nimbus.service.context.DistributedSharedContextService"
                 instance="template">

            <service-property name="Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME" extends="true">#RequestConnectionFactory</service-property>
            <service-property name="Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME" extends="true">#Cluster</service-property>
            <service-property name="Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME">#TransactionManager</service-property>
            <service-property name="Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME">#CacheMap</service-property>
            <service-property name="Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME">#CacheMap</service-property>
            <service-property name="Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME">#Interpreter</service-property>
            <service-property name="Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME">#ExecuteQueue</service-property>
            <service-property name="Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME">#ContextStore</service-property>
            <service-property name="Template.Service.Context.SharedContext.PARALLEL_REQ_QUEUE_SERVICE_NAME">#ParallelRequestQueue</service-property>
            <service-property name="Template.Service.Context.SharedContext.KEY_DISTRIBUTOR_SERVICE_NAME">#KeyDistributor</service-property>

<ifdef name="Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME">
            <!-- コンテキスト情報の変更を送受信するRequestConnectionFactoryサービスのサービス名を設定する -->
            <attribute name="RequestConnectionFactoryServiceName">${Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.REQUEST_CONNECTION_FAC_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME">
            <!-- コンテキスト情報の共有を管理するClusterサービスのサービス名を設定する -->
            <attribute name="ClusterServiceName">${Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CLUSTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME">
            <!-- コンテキスト情報のトランザクションを管理するSharedContextTransactionManagerサービスのサービス名を設定する -->
            <attribute name="SharedContextTransactionManagerServiceName">${Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.TRANSACTION_MANAGER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME">
            <!-- クライアントモードの時に、データをキャッシュするCacheMapサービスのサービス名を設定する -->
            <attribute name="ClientCacheMapServiceName">${Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CLIENT_CACHE_MAP_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME">
            <!-- サーバモードの時に、データをキャッシュするCacheMapサービスのサービス名を設定する -->
            <attribute name="ServerCacheMapServiceName">${Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.SERVER_CACHE_MAP_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME">
            <!-- スクリプトを実行するInterpreterサービスのサービス名を設定する -->
            <attribute name="InterpreterServiceName">${Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.INTERPRETER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME">
            <!-- スクリプトを実行要求受付Queueサービスのサービス名を設定する -->
            <attribute name="ExecuteQueueServiceName">${Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.EXECUTE_QUEUE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME">
            <!-- 永続化を行うContextStoreサービスのサービス名を設定する -->
            <attribute name="ContextStoreServiceName">${Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.CONTEXT_STORE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.PARALLEL_REQ_QUEUE_SERVICE_NAME">
            <!-- 分散コンテキストへの要求を並列で処理するための受付Queueサービスのサービス名を設定する -->
            <attribute name="ParallelRequestQueueServiceName">${Template.Service.Context.SharedContext.PARALLEL_REQ_QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.PARALLEL_REQ_QUEUE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.SharedContext.KEY_DISTRIBUTOR_SERVICE_NAME">
            <!-- 分散コンテキストのキー分散を決める付SharedContextKeyDistributorサービスのサービス名を設定する -->
            <attribute name="SharedContextKeyDistributorServiceName">${Template.Service.Context.SharedContext.KEY_DISTRIBUTOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.SharedContext.KEY_DISTRIBUTOR_SERVICE_NAME}</depends>
</ifdef>
            
            <attribute name="ForcedLockTimeoutCheckInterval">5000</attribute>

        </service>

    </manager>

    <manager name="Template.Service.Context.ContextStore.Database">

        <!-- コンテキストをデータベースに永続化するContextStoreサービス -->
        <service name="ContextStore"
                 code="jp.ossc.nimbus.service.context.DatabaseContextStoreService"
                 instance="template">

            <service-property name="Template.Service.Context.ContextStore.CONNECTION_FAC_SERVICE_NAME" extends="true">#ConnectionFactory</service-property>
            <service-property name="Template.Service.Context.ContextStore.PERSISTENT_MANAGER_SERVICE_NAME" extends="true">#PersistentManager</service-property>

<ifdef name="Template.Service.Context.ContextStore.CONNECTION_FAC_SERVICE_NAME">
            <!-- JDBC接続を取得するConnectionFactoryサービスのサービス名を設定する -->
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Context.ContextStore.CONNECTION_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.ContextStore.CONNECTION_FAC_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.ContextStore.PERSISTENT_MANAGER_SERVICE_NAME">
            <!-- データベースとのO/Rマッピングを行うPersistentManagerサービスのサービス名を設定する -->
            <attribute name="PersistentManagerServiceName">${Template.Service.Context.ContextStore.PERSISTENT_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.ContextStore.PERSISTENT_MANAGER_SERVICE_NAME}</depends>
</ifdef>

        </service>

    </manager>

    <manager name="Template.Service.Context.ContextStore.File">

        <!-- コンテキストをデータベースに永続化するContextStoreサービス -->
        <service name="ContextStore"
                 code="jp.ossc.nimbus.service.context.FileContextStoreService"
                 instance="template">
            
            <service-property name="Template.Service.Context.ContextStore.EXTERNALIZER_SERVICE_NAME" extends="true">#Externalizer</service-property>

<ifdef name="Template.Service.Context.ContextStore.CONNECTION_FAC_SERVICE_NAME">
            <!-- ファイルへの直列化/非直列化を行うExternalizerサービスのサービス名を設定する -->
            <attribute name="ExternalizerServiceName">${Template.Service.Context.ContextStore.EXTERNALIZER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.ContextStore.EXTERNALIZER_SERVICE_NAME}</depends>
</ifdef>

        </service>

    </manager>
    
    <manager name="Template.Service.Context.TransactionManager">

        <!-- 共有コンテキストのトランザクション管理を行うSharedContextTransactionManagerサービス -->
        <service name="TransactionManager"
                 code="jp.ossc.nimbus.service.context.SharedContextTransactionManagerService"
                 instance="template"/>

    </manager>

    <manager name="Template.Service.Context.KeyDistributor">

        <!-- MD5のハッシュ値でキー分散を行うSharedContextKeyDistributorサービス -->
        <service name="MD5HashSharedContextKeyDistributor"
                 code="jp.ossc.nimbus.service.context.MD5HashSharedContextKeyDistributorService"
                 instance="template"/>

        <!-- データベースのマスタを元にキー分散を行うSharedContextKeyDistributorサービス -->
        <service name="DatabaseSharedContextKeyDistributor"
                 code="jp.ossc.nimbus.service.context.DatabaseSharedContextKeyDistributorService"
                 instance="template">

            <service-property name="Template.Service.Context.KeyDistributor.CONNECTION_FAC_SERVICE_NAME" extends="true">#ConnectionFactory</service-property>
            <service-property name="Template.Service.Context.KeyDistributor.PERSISTENT_MANAGER_SERVICE_NAME" extends="true">#PersistentManager</service-property>

<ifdef name="Template.Service.Context.KeyDistributor.CONNECTION_FAC_SERVICE_NAME">
            <!-- JDBC接続を取得するConnectionFactoryサービスのサービス名を設定する -->
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Context.KeyDistributor.CONNECTION_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.KeyDistributor.CONNECTION_FAC_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Context.KeyDistributor.PERSISTENT_MANAGER_SERVICE_NAME">
            <!-- データベースとのO/Rマッピングを行うPersistentManagerサービスのサービス名を設定する -->
            <attribute name="PersistentManagerServiceName">${Template.Service.Context.KeyDistributor.PERSISTENT_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Context.KeyDistributor.PERSISTENT_MANAGER_SERVICE_NAME}</depends>
</ifdef>

        </service>

    </manager>

</server>