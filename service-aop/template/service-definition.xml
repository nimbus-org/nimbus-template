<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server PUBLIC
  "-//Nimbus//DTD Nimbus 1.0//JA"
  "http://nimbus.sourceforge.jp/dtd/nimbus-service_1_0.dtd">

<server>
    
    <default-log>
        <debug output="false"/>
        <information output="false"/>
        <warning output="true"/>
        <error output="true"/>
        <fatal output="true"/>
    </default-log>

    <manager name="Template.Service.AOP">

        <!-- 指定されたキーに応じてInterceptorChainを生成するInterceptorChainFactoryサービス -->
        <service name="InterceptorChainFactory"
                 code="jp.ossc.nimbus.service.aop.DefaultInterceptorChainFactoryService"
                 instance="template"/>

        <!-- Interceptorのリストを形成するInterceptorChainListサービス -->
        <service name="InterceptorChainList"
                 code="jp.ossc.nimbus.service.aop.DefaultInterceptorChainListService"
                 instance="template"/>

        <!-- メソッドをリフレクションで呼び出すInvokerサービス -->
        <service name="MethodReflectionCallInvoker"
                 code="jp.ossc.nimbus.service.aop.invoker.MethodReflectionCallInvokerService"
                 instance="template"/>

        <!-- アスペクトされたメソッドをリフレクションで呼び出すInvokerサービス -->
        <service name="WrappedMethodReflectionCallInvoker"
                 code="jp.ossc.nimbus.service.aop.javassist.WrappedMethodReflectionCallInvokerService"
                 instance="template"/>

        <!-- メソッドにInterceptorをアスペクトするサービス -->
        <service name="MethodInterceptorAspect"
                 code="jp.ossc.nimbus.service.aop.javassist.MethodInterceptorAspectService"
                 instance="template">

            <service-property name="Template.Service.AOP.Aspect.INTERCEPTOR_CHAIN_LIST_SERVICE_NAME" extends="true">#InterceptorChainList</service-property>
            <service-property name="Template.Service.AOP.Aspect.INVOKER_SERVICE_NAME">#Invoker</service-property>

<ifdef name="Template.Service.AOP.Aspect.INTERCEPTOR_CHAIN_LIST_SERVICE_NAME">
            <attribute name="InterceptorChainListServiceName">${Template.Service.AOP.Aspect.INTERCEPTOR_CHAIN_LIST_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Aspect.INTERCEPTOR_CHAIN_LIST_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Aspect.INVOKER_SERVICE_NAME">
            <attribute name="InvokerServiceName">${Template.Service.AOP.Aspect.INVOKER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Aspect.INVOKER_SERVICE_NAME}</depends>
</ifdef>
        </service>

    </manager>

    <manager name="Template.Service.AOP.Interceptor">

        <manager-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</manager-property>
        <manager-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</manager-property>
        <manager-property name="Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME">#BusinessJournal</manager-property>

        <!-- 業務フローのジャーナルの出力量統計を取得するInterceptorサービス -->
        <service name="BeanFlowJournalMetricsInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.BeanFlowJournalMetricsInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME">#BusinessJournal</service-property>
            <service-property name="Template.Service.AOP.Interceptor.JournalMetrics.EDITOR_FINDER_SERVICE_NAME">#BusinessJournalEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Interceptor.JournalMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">#BusinessJournalPerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.JournalMetrics.EDITOR_FINDER_SERVICE_NAME">
            <attribute name="EditorFinderServiceName">${Template.Service.AOP.Interceptor.JournalMetrics.EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.JournalMetrics.EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.JournalMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Interceptor.JournalMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.JournalMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 業務フローの性能統計を取得するInterceptorサービス -->
        <service name="BeanFlowMetricsInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.BeanFlowMetricsInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.BeanFlowMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">#BeanFlowPerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Interceptor.BeanFlowMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Interceptor.BeanFlowMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.BeanFlowMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- ブレイクポイントを設置するInterceptorサービス -->
        <service name="BreakPointInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.BreakPointInterceptorService"
                 instance="template"/>

        <!-- チェックポイントを設置するInterceptorサービス -->
        <service name="CheckPointInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.CheckPointInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.CheckPoint.CHECK_POINT_TRACER_SERVICE_NAME">#CheckPointTracer</service-property>

<ifdef name="Template.Service.AOP.Interceptor.CheckPoint.CHECK_POINT_TRACER_SERVICE_NAME">
            <attribute name="CheckPointTracerServiceName">${Template.Service.AOP.Interceptor.CheckPoint.CHECK_POINT_TRACER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.CheckPoint.CHECK_POINT_TRACER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- チェックポイントをトレースするCheckPointTracerサービス -->
        <service name="CheckPointTracer"
                 code="jp.ossc.nimbus.service.aop.interceptor.CheckPointTracerService"
                 instance="template"/>

        <!-- コンテキスト情報をエクスポートするInterceptorサービス -->
        <service name="ContextExportInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ContextExportInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- コンテキスト情報をインポートするInterceptorサービス -->
        <service name="ContextImportInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ContextImportInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 例外処理Interceptorサービス -->
        <service name="ExceptionHandlingInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ExceptionHandlingInterceptorService"
                 instance="template"/>

        <!-- 例外ハンドラ -->
        <service name="DefaultExceptionHandler"
                 code="jp.ossc.nimbus.service.aop.interceptor.DefaultExceptionHandlerService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME">#BusinessJournal</service-property>

            <attribute name="ThrowException">true</attribute>
<ifdef name="Template.Service.AOP.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 例外消費Interceptorサービス -->
        <service name="ExceptionConsumeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ExceptionConsumeInterceptorService"
                 instance="template"/>

        <!-- 例外発生Interceptorサービス -->
        <service name="ExceptionThrowInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ExceptionThrowInterceptorService"
                 instance="template"/>

        <!-- 例外ラップInterceptorサービス -->
        <service name="ExceptionWrapInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ExceptionWrapInterceptorService"
                 instance="template"/>

        <!-- 流量制御を行うInterceptorサービス -->
        <service name="FlowControlInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.FlowControlInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.FlowControl.SEMAPHORE_SERVICE_NAME" extends="true">#Semaphore</service-property>

<ifdef name="Template.Service.AOP.Interceptor.FlowControl.SEMAPHORE_SERVICE_NAME">
            <attribute name="SemaphoreServiceName">${Template.Service.AOP.Interceptor.FlowControl.SEMAPHORE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.FlowControl.SEMAPHORE_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- クラス互換性のない例外をラップしてthrowするInterceptorサービス -->
        <service name="IncompatibleExceptionWrapInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.IncompatibleExceptionWrapInterceptorService"
                 instance="template"/>

        <!-- クラス互換性のない例外をアンラップしてthrowするInterceptorサービス -->
        <service name="IncompatibleExceptionUnwrapInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.IncompatibleExceptionUnwrapInterceptorService"
                 instance="template"/>

        <!-- 非同期呼び出しするInterceptorサービス -->
        <service name="MethodAsynchronousInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MethodAsynchronousInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.Asynchronous.REQUEST_QUEUE_SERVICE_NAME">#RequestQueue</service-property>
            <service-property name="Template.Service.AOP.Interceptor.Asynchronous.RESPONSE_QUEUE_SERVICE_NAME">#ResponseQueueFactory</service-property>

<ifdef name="Template.Service.AOP.Interceptor.Asynchronous.REQUEST_QUEUE_SERVICE_NAME">
            <attribute name="RequestQueueServiceName">${Template.Service.AOP.Interceptor.Asynchronous.REQUEST_QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.Asynchronous.REQUEST_QUEUE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.Asynchronous.RESPONSE_QUEUE_SERVICE_NAME">
            <attribute name="ResponseQueueServiceName">${Template.Service.AOP.Interceptor.Asynchronous.RESPONSE_QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.Asynchronous.RESPONSE_QUEUE_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- ジャーナルを出力するInterceptorサービス -->
        <service name="MethodJournalInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MethodJournalInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME">#BusinessJournal</service-property>
            <service-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</service-property>

<ifdef name="Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 呼び出されたメソッドに対して使用するInterceptorを振り分けるInterceptorサービス -->
        <service name="MethodMappingInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MethodMappingInterceptorService"
                 instance="template"/>

        <!-- メソッド呼び出しの性能統計を取得するInterceptorサービス -->
        <service name="MetricsInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MethodMetricsInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.MethodMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">#PerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Interceptor.MethodMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Interceptor.MethodMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.MethodMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 同期化Interceptorサービス -->
        <service name="MethodSynchronizeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MethodSynchronizeInterceptorService"
                 instance="template"/>

        <!-- モックを応答するInterceptorサービス -->
        <service name="MockInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.MockInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.Mock.MOCK_FACTORY_SERVICE_NAME">#MockFactory</service-property>
            <service-property name="Template.Service.AOP.Interceptor.Mock.MOCK_SERVICE_NAME">#Mock</service-property>

<ifdef name="Template.Service.AOP.Interceptor.Mock.MOCK_FACTORY_SERVICE_NAME">
            <attribute name="MockFactoryServiceName">${Template.Service.AOP.Interceptor.Mock.MOCK_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.Mock.MOCK_FACTORY_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.Mock.MOCK_SERVICE_NAME">
            <attribute name="MockServiceName">${Template.Service.AOP.Interceptor.Mock.MOCK_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.Mock.MOCK_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 呼び出されていないメソッドを調査するInterceptorサービス -->
        <service name="NoCalledMethodMetricsInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.NoCalledMethodMetricsInterceptorService"
                 instance="template"/>

        <!-- nullを返すInterceptorサービス -->
        <service name="NullReturnInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.NullReturnInterceptorService"
                 instance="template"/>

        <!-- 処理性能を記録するInterceptorサービス -->
        <service name="PerformanceRecordInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.PerformanceRecordInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.PerformanceRecord.PERFORMANCE_RECORDER_SERVICE_NAME" extends="true">#PerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Interceptor.PerformanceRecord.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Interceptor.PerformanceRecord.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.PerformanceRecord.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 処理時間をチェックするInterceptorサービス -->
        <service name="RequestProcessCheckInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.RequestProcessCheckInterceptorService"
                 instance="template"/>

        <!-- 例外発生時にリトライ処理を行うInterceptorサービス -->
        <service name="RetryInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.RetryInterceptorService"
                 instance="template">
            <attribute name="ExceptionConditions">java.lang.Throwable</attribute>
        </service>

        <!-- 指定した戻り値を返すInterceptorサービス -->
        <service name="ReturnInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ReturnInterceptorService"
                 instance="template"/>

        <!-- 一定時間sleepを挟むInterceptorサービス -->
        <service name="SleepInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.SleepInterceptorService"
                 instance="template"/>

        <!-- ThreadContext初期化Interceptorサービス -->
        <service name="ThreadContextInitializeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.ThreadContextInitializeInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME">#Sequence</service-property>
            <service-property name="Template.Service.AOP.Interceptor.ThreadContextInitialize.CODEMASTER_FINDER_SERVICE_NAME">#CodeMasterFinder</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME">
            <attribute name="SequenceServiceName">${Template.Service.AOP.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.ThreadContextInitialize.CODEMASTER_FINDER_SERVICE_NAME">
            <attribute name="CodeMasterFinderServiceName">${Template.Service.AOP.Interceptor.ThreadContextInitialize.CODEMASTER_FINDER_SERVICE_NAME}</attribute>
</ifdef>
        </service>

        <!-- トレースログ出力Interceptorサービス -->
        <service name="TraceLoggingInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.TraceLoggingInterceptorService"
                 instance="template"/>

        <!-- OAuth2 スコープマッチャサービス -->
        <service name="OAuth2ScopeMatcher"
                 code="jp.ossc.nimbus.service.aop.interceptor.DefaultOAuth2ScopeMatcherService"
                 instance="template"/>
    </manager>

    <manager name="Template.Service.AOP.Servlet">

        <!-- Servletに対するリクエストパスに応じてInterceptorChainListを選択するInterceptorChainListサービス -->
        <service name="SelectableServletFilterInterceptorChainList"
                 code="jp.ossc.nimbus.service.aop.interceptor.SelectableServletFilterInterceptorChainListService"
                 instance="template"/>

    </manager>

    <manager name="Template.Service.AOP.Servlet.Interceptor">

        <manager-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</manager-property>
        <manager-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</manager-property>
        <manager-property name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">#AccessJournal</manager-property>
        <manager-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME">#BeanFlowSelector</manager-property>
        <manager-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME">#BeanFlowInvokerFactory</manager-property>
        <manager-property name="Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME">#CodeMasterFinder</manager-property>

        <!-- アクセスジャーナルを記録するInterceptorサービス -->
        <service name="AccessJournalInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.AccessJournalInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">#AccessJournal</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.ACCESS_EDITOR_FINDER_SERVICE_NAME">#AccessEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.REQUEST_EDITOR_FINDER_SERVICE_NAME">#RequestEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.RESPONSE_EDITOR_FINDER_SERVICE_NAME">#ResponseEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.SEQUENCE_SERVICE_NAME">#Sequence</service-property>
            <service-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.ACCESS_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="AccessEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.AccessJournal.ACCESS_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.AccessJournal.ACCESS_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.REQUEST_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="RequestEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.AccessJournal.REQUEST_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.AccessJournal.REQUEST_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.RESPONSE_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ResponseEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.AccessJournal.RESPONSE_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.AccessJournal.RESPONSE_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.AccessJournal.SEQUENCE_SERVICE_NAME">
            <attribute name="SequenceServiceName">${Template.Service.AOP.Servlet.Interceptor.AccessJournal.SEQUENCE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.AccessJournal.SEQUENCE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">
            <attribute name="ContextServiceName">${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 認証処理を行うInterceptorサービス -->
        <service name="AuthenticateInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.AuthenticateInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.Authenticate.AUTHENTICATE_STORE_SERVICE_NAME">#AuthenticateStore</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.Authenticate.AUTHENTICATE_STORE_SERVICE_NAME">
            <attribute name="AuthenticateStoreServiceName">${Template.Service.AOP.Servlet.Interceptor.Authenticate.AUTHENTICATE_STORE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.Authenticate.AUTHENTICATE_STORE_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 業務フローの存在有無をチェックするInterceptorサービス -->
        <service name="BeanFlowSelectCheckInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.BeanFlowSelectCheckInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME">#BeanFlowSelector</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME">#BeanFlowInvokerFactory</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME">
            <attribute name="BeanFlowSelectorServiceName">${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME">
            <attribute name="BeanFlowInvokerFactoryServiceName">${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 閉塞制御Interceptorサービス -->
        <service name="BlockadeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.BlockadeInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME">#CodeMasterFinder</service-property>
            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME">
            <attribute name="CodeMasterFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 認証情報をデータベースに永続化するAuthenticateStoreサービス -->
        <service name="DatabaseAuthenticateStore"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.DatabaseAuthenticateStoreService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.CONNECTION_FACTORY_SERVICE_NAME" extends="true">#ConnectionFactory</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.PERSISTENT_MANAGER_SERVICE_NAME" extends="true">#PersistentManager</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.PERSISTENT_MANAGER_SERVICE_NAME">
            <attribute name="PersistentManagerServiceName">${Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.PERSISTENT_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.DatabaseAuthenticateStore.PERSISTENT_MANAGER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 認証情報を共有コンテキストに永続化するAuthenticateStoreサービス -->
        <service name="SharedContextAuthenticateStore"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.SharedContextAuthenticateStoreService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.SharedContextAuthenticateStore.SHARED_CONTEXT_SERVICE_NAME" extends="true">#SharedContext</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.SharedContextAuthenticateStore.SHARED_CONTEXT_SERVICE_NAME">
            <attribute name="SharedContextServiceName">${Template.Service.AOP.Servlet.Interceptor.SharedContextAuthenticateStore.SHARED_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.SharedContextAuthenticateStore.SHARED_CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 例外を処理するExceptionHandlerサービス -->
        <service name="ExceptionHandler"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.DefaultExceptionHandlerService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME">#AccessJournal</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">#ExceptionEditorFinder</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.JOURNAL_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExceptionEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ExceptionHandler.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- 例外を処理するInterceptorサービス -->
        <service name="ExceptionHandlingInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ExceptionHandlingInterceptorService"
                 instance="template"/>

        <!-- HTTPレスポンスをキャッシュするInterceptorサービス -->
        <service name="HttpResponseCacheInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpResponseCacheInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.HttpResponseCache.CACHE_MAP_SERVICE_NAME" extends="true">#CacheMap</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.HttpResponseCache.CACHE_MAP_SERVICE_NAME">
            <attribute name="CacheMapServiceName">${Template.Service.AOP.Servlet.Interceptor.HttpResponseCache.CACHE_MAP_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.HttpResponseCache.CACHE_MAP_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- HTTPリクエストをチェックするInterceptorサービス -->
        <service name="HttpServletRequestCheckInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletRequestCheckInterceptorService"
                 instance="template"/>

        <!-- HTTPリクエストの性能統計を記録するInterceptorサービス -->
        <service name="HttpServletRequestMetricsInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletRequestMetricsInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.HttpServletRequestMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">#PerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.HttpServletRequestMetrics.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Servlet.Interceptor.HttpServletRequestMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.HttpServletRequestMetrics.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- HTTPリクエストのプロパティをスレッドコンテキストに移すInterceptorサービス -->
        <service name="HttpServletRequestTransferInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletRequestTransferInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- URLの一部をパラメータと解釈してURLから除外するInterceptorサービス -->
        <service name="HttpServletRequestURLConvertInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletRequestURLConvertInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">#AccessJournal</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- HTTPレスポンスを圧縮するInterceptorサービス -->
        <service name="HttpServletResponseDeflateInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletResponseDeflateInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.PERFORMANCE_RECORDER_SERVICE_NAME">#PerformanceRecorder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.BEFORE_PERFORMANCE_RECORDER_SERVICE_NAME">#PerformanceRecorder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.AFTER_PERFORMANCE_RECORDER_SERVICE_NAME">#PerformanceRecorder</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="PerformanceRecorderServiceName">${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.BEFORE_PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="BeforeCompressSizePerformanceRecorderServiceName">${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.BEFORE_PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.BEFORE_PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.AFTER_PERFORMANCE_RECORDER_SERVICE_NAME">
            <attribute name="AfterCompressSizePerformanceRecorderServiceName">${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.AFTER_PERFORMANCE_RECORDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.HttpServletResponseDeflate.AFTER_PERFORMANCE_RECORDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- HTTPレスポンスのヘッダやCookieを設定するInterceptorサービス -->
        <service name="HttpServletResponseSetInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.HttpServletResponseSetInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</service-property>

<ifdef name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">
            <attribute name="ContextServiceName">${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- HTTPリクエストのパスに応じてInterceptorを振り分けるInterceptorサービス -->
        <service name="SelectableServletFilterInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.SelectableServletFilterInterceptorService"
                 instance="template"/>

        <!-- Interceptorに、ServletFilterInterceptorServiceの機能を付加するアダプタとなるInterceptorサービス -->
        <service name="ServletFilterInterceptorAdapter"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ServletFilterInterceptorAdapterService"
                 instance="template"/>

        <!-- リクエストをDTOに交換するInterceptorサービス -->
        <service name="ServletRequestExchangeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ServletRequestExchangeInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.CONVERTER_SERVICE_NAME">#ServletRequestConverter</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">#AccessJournal</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME">#ExchangeEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME">#RequestObjectEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">#ExceptionEditorFinder</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.CONVERTER_SERVICE_NAME">
            <attribute name="ConverterServiceName">${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.CONVERTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.CONVERTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExchangeEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="RequestObjectEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExceptionEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ServletRequestExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- サーブレットリクエストを初期化するInterceptorサービス -->
        <service name="ServletRequestInitializeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ServletRequestInitializeInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">#Context</service-property>

<ifdef name="Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME">
            <attribute name="ContextServiceName">${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.CONTEXT_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- サーブレットレスポンスを設定するInterceptorサービス -->
        <service name="ServletResponseSetInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ServletResponseSetInterceptorService"
                 instance="template"/>

        <!-- HTTPリクエストの文字コードを設定するInterceptorサービス -->
        <service name="SetCharacterEncodingInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.SetCharacterEncodingInterceptorService"
                 instance="template"/>

        <!-- リクエストのストリームをDTOに交換するInterceptorサービス -->
        <service name="StreamExchangeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.StreamExchangeInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_CONVERTER_SERVICE_NAME">#RequestConverter</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_CONVERTER_SERVICE_NAME">#ResponseConverter</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">#AccessJournal</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME">#ExchangeEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_REQ_EDITOR_FINDER_SERVICE_NAME">#ExchangeRequestEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME">#RequestObjectEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_RES_EDITOR_FINDER_SERVICE_NAME">#ExchangeResponseEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_OBJ_EDITOR_FINDER_SERVICE_NAME">#ResponseObjectEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_BYTES_EDITOR_FINDER_SERVICE_NAME">#RequestBytesEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_BYTES_EDITOR_FINDER_SERVICE_NAME">#ResponseBytesEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">#ExceptionEditorFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME">#BeanFlowSelector</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME">#BeanFlowInvokerFactory</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_CONVERTER_SERVICE_NAME">
            <attribute name="RequestStreamConverterServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_CONVERTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_CONVERTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_CONVERTER_SERVICE_NAME">
            <attribute name="ResponseStreamConverterServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_CONVERTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_CONVERTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME">
            <attribute name="JournalServiceName">${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.JOURNAL_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExchangeEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_REQ_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExchangeRequestEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_REQ_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_REQ_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="RequestObjectEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_OBJ_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_RES_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExchangeResponseEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_RES_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCHANGE_RES_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_OBJ_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ResponseObjectEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_OBJ_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_OBJ_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_BYTES_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="RequestBytesEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_BYTES_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.REQ_BYTES_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_BYTES_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ResponseBytesEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_BYTES_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.RES_BYTES_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME">
            <attribute name="ExceptionEditorFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.StreamExchange.EXCEPTION_EDITOR_FINDER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME">
            <attribute name="BeanFlowSelectorServiceName">${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_SELECTOR_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME">
            <attribute name="BeanFlowInvokerFactoryServiceName">${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.BEANFLOW_INVOKER_FAC_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- ThreadContext初期化Interceptorサービス -->
        <service name="ThreadContextInitializeInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.ThreadContextInitializeInterceptorService"
                 instance="template">

            <service-property name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME">#CodeMasterFinder</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME">#Sequence</service-property>

<ifdef name="Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME">
            <attribute name="ThreadContextServiceName">${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Interceptor.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME">
            <attribute name="SequenceServiceName">${Template.Service.AOP.Servlet.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.ThreadContextInitialize.SEQUENCE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME">
            <attribute name="CodeMasterFinderServiceName">${Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.CODEMASTER_FINDER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- OAuth2認証Interceptorサービス -->
        <service name="OAuth2AuthenticateInterceptor"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.OAuth2AuthenticateInterceptorService"
                 instance="template">
            
            <service-property name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.HTTP_CLIENT_FACTORY_SERVICE_NAME">#HttpClientFactory</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_RESOLVER_SERVICE_NAME">#OAuth2ScopeResolver</service-property>
            <service-property name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_MATCHER_SERVICE_NAME">#OAuth2ScopeMatcher</service-property>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.HTTP_CLIENT_FACTORY_SERVICE_NAME">
            <attribute name="HttpClientFactoryServiceName">${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.HTTP_CLIENT_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.HTTP_CLIENT_FACTORY_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_RESOLVER_SERVICE_NAME">
            <attribute name="OAuth2ScopeResolverServiceName">${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_RESOLVER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_RESOLVER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_MATCHER_SERVICE_NAME">
            <attribute name="OAuth2ScopeMatcherServiceName">${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_MATCHER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.AOP.Servlet.Interceptor.OAuth2Authenticate.OAUTH2_SCOPE_MATCHER_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- OAuth2 スコープ解決サービス -->
        <service name="OAuth2ScopeResolver"
                 code="jp.ossc.nimbus.service.aop.interceptor.servlet.DefaultOAuth2ScopeResolverService"
                 instance="template"/>

    </manager>

</server>