<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server PUBLIC
  "-//Nimbus//DTD Nimbus 1.0//JA"
  "http://nimbus.sourceforge.jp/dtd/nimbus-service_1_0.dtd">

<server>
    
    <default-log>
        <debug output="false"/>
        <information output="false"/>
        <warning output="true"/>
        <error output="true"/>
        <fatal output="true"/>
    </default-log>

    <manager name="Template.Service.Scheduler2.Scheduler.Default">

        <manager-property name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">#ScheduleManager</manager-property>
        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>

        <!-- スケジューラサービス -->
        <service name="Scheduler"
                 code="jp.ossc.nimbus.service.scheduler2.DefaultSchedulerService"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME">#ScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.BEANFLOW_SCHEDULE_EXECUTOR_SERVICE_NAME">#BeanFlowScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">#CommandScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.LOCAL_COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">#LocalCommandScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.SERVICE_CALL_SCHEDULE_EXECUTOR_SERVICE_NAME">#ServiceCallScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.CONCENTRATE_SCHEDULE_EXECUTOR_SERVICE_NAME">#ConcentrateScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.AWS_LAMBDA_SCHEDULE_EXECUTOR_SERVICE_NAME">#AWSLambdaScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.AWS_GLUE_SCHEDULE_EXECUTOR_SERVICE_NAME">#AWSGlueScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.AWS_SAGEMAKER_SCHEDULE_EXECUTOR_SERVICE_NAME">#AWSSageMakerScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.K8S_SCHEDULE_EXECUTOR_SERVICE_NAME">#KuberneteseScheduleExecutor</service-property>
            <service-property name="Template.Service.Scheduler2.SEQUENCE_SERVICE_NAME">#Sequence</service-property>
            <service-property name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</service-property>
            <service-property name="Template.Service.Scheduler2.TRANSACTION_MANAGER_FACTORY_SERVICE_NAME">#TransactionManagerFactory</service-property>
            <service-property name="Template.Service.Scheduler2.QUEUE_SERVICE_NAME">#Queue</service-property>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">#ScheduleManager</attribute>
            <depends>ScheduleManager</depends>
</ifdef>
            <attribute name="ScheduleExecutorServiceNames">
                <object code="jp.ossc.nimbus.core.ServiceName[]">
                    <constructor>
<ifdef name="Template.Service.Scheduler2.BEANFLOW_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.BEANFLOW_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.LOCAL_COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.LOCAL_COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.SERVICE_CALL_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.SERVICE_CALL_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.CONCENTRATE_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.CONCENTRATE_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_LAMBDA_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.AWS_LAMBDA_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_GLUE_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.AWS_GLUE_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_SAGEMAKER_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.AWS_SAGEMAKER_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
<ifdef name="Template.Service.Scheduler2.K8S_SCHEDULE_EXECUTOR_SERVICE_NAME">
                        <argument type="jp.ossc.nimbus.core.ServiceName">${Template.Service.Scheduler2.K8S_SCHEDULE_EXECUTOR_SERVICE_NAME}</argument>
</ifdef>
                    </constructor>
                </object>
            </attribute>
<ifdef name="Template.Service.Scheduler2.BEANFLOW_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.BEANFLOW_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.LOCAL_COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.LOCAL_COMMAND_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.SERVICE_CALL_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.SERVICE_CALL_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.CONCENTRATE_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.CONCENTRATE_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_LAMBDA_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.AWS_LAMBDA_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_GLUE_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.AWS_GLUE_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.AWS_SAGEMAKER_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.AWS_SAGEMAKER_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.K8S_SCHEDULE_EXECUTOR_SERVICE_NAME">
            <depends>${Template.Service.Scheduler2.K8S_SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME">
            <!-- ScheduleExecuterサービスのサービス名を設定する -->
            <attribute name="ScheduleExecutorServiceName">${Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SEQUENCE_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを発番するSequenceサービスのサービス名を設定する -->
            <attribute name="SequenceServiceName">${Template.Service.Scheduler2.SEQUENCE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SEQUENCE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを設定するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.TRANSACTION_MANAGER_FACTORY_SERVICE_NAME">
            <!-- トランザクション制御を行うTransactionManagerFactoryサービスのサービス名を設定する -->
            <attribute name="TransactionManagerFactoryServiceName">${Template.Service.Scheduler2.TRANSACTION_MANAGER_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.TRANSACTION_MANAGER_FACTORY_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">
            <!-- スケジューラをクラスタ化するクラスタサービスのサービス名を設定する -->
            <attribute name="ClusterServiceName">${Template.Service.Scheduler2.CLUSTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.CLUSTER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.QUEUE_SERVICE_NAME">
            <!-- スケジュールを投入するQueueサービスのサービス名を設定する -->
            <attribute name="QueueServiceName">${Template.Service.Scheduler2.QUEUE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.QUEUE_SERVICE_NAME}</depends>
</ifdef>

            <!-- スケジュール実行スレッド数を設定する -->
            <attribute name="ScheduleDispatcherSize">5</attribute>

        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleExecutor">

        <manager-property name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">#ScheduleManager</manager-property>
        <manager-property name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">#ThreadContext</manager-property>

        <!-- 業務フローでスケジュールを処理するScheduleExecuterサービス -->
        <service name="BeanFlowScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.BeanFlowScheduleExecutorService"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME">#BeanFlowInvokerFactory</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME">
            <!-- BeanFlowInvokerFactoryサービスのサービス名を設定する -->
            <attribute name="BeanFlowInvokerFactoryServiceName">${Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- コマンドでスケジュールを処理するScheduleExecuterサービス -->
        <service name="CommandScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.CommandScheduleExecutorService"
                 instance="template">

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- コマンドでスケジュールを処理するScheduleExecuterサービス -->
        <service name="ServiceCallScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.ServiceCallScheduleExecutorService"
                 instance="template">
            
            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.INTERPRETER_SERVICE_NAME">#Interpreter</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.INTERPRETER_SERVICE_NAME">
            <!-- Interpreterサービスのサービス名を設定する -->
            <attribute name="InterpreterServiceName">${Template.Service.Scheduler2.ScheduleExecutor.INTERPRETER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.INTERPRETER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- 集配信スケジュールを処理するScheduleExecuterサービス -->
        <service name="ConcentrateScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.ConcentrateScheduleExecutorService"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.CONCENTRATE_BACKUP_MANAGER_SERVICE_NAME">#ConcentrateBackupManager</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.CONCENTRATE_BACKUP_MANAGER_SERVICE_NAME">
            <!-- 集配信したファイルをバックアップ管理するConcentrateBackupManagerサービスのサービス名を設定する -->
            <attribute name="ConcentrateBackupManagerServiceName">${Template.Service.Scheduler2.CONCENTRATE_BACKUP_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.CONCENTRATE_BACKUP_MANAGER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- 集配信したファイルをファイルシステムにバックアップ管理するConcentrateBackupManagerサービス -->
        <service name="FileConcentrateBackupManager"
                 code="jp.ossc.nimbus.service.scheduler2.FileConcentrateBackupManagerService"
                 instance="template"/>

        <!-- クラスタ化されたScheduleExecuterサービス -->
        <service name="ClusterScheduleExecutor"
                 template="Template.Service.Proxy.Client#RemoteClient"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME">#ScheduleExecutor</service-property>

            <attribute name="RemoteInterfaceClassName">jp.ossc.nimbus.service.scheduler2.ScheduleExecutor</attribute>
            <attribute name="RemoteServiceName">${Template.Service.Scheduler2.SCHEDULE_EXECUTOR_SERVICE_NAME}</attribute>
        </service>

        <!-- ScheduleExecuterをクラスタ化して呼び出すInvokerサービス -->
        <service name="ScheduleExecutorInvoker"
                 code="jp.ossc.nimbus.service.scheduler2.ScheduleExecutorClusterInvokerService"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.KEEP_ALIVE_CHECKER_SELECTOR_SERVICE_NAME">#ScheduleExecutorSelector</service-property>

<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.KEEP_ALIVE_CHECKER_SELECTOR_SERVICE_NAME">
            <attribute name="KeepAliveCheckerSelectorServiceName">${Template.Service.Scheduler2.ScheduleExecutor.KEEP_ALIVE_CHECKER_SELECTOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.KEEP_ALIVE_CHECKER_SELECTOR_SERVICE_NAME}</depends>
</ifdef>
        </service>

        <!-- AWSのLambdaを呼び出すScheduleExecuterサービス -->
        <service name="AWSLambdaScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.aws.AWSLambdaScheduleExecutorService"
                 instance="template">
            
            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.AWS_LAMBDA_CLIENT_BUILDER_SERVICE_NAME">#AWSLambdaClientBuilder</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.AWS_LAMBDA_CLIENT_BUILDER_SERVICE_NAME">
            <!-- AWSLambdaClientBuilderサービスのサービス名を設定する -->
            <attribute name="AwsClientBuilderServiceName">${Template.Service.Scheduler2.ScheduleExecutor.AWS_LAMBDA_CLIENT_BUILDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.AWS_LAMBDA_CLIENT_BUILDER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- AWSのGlueを呼び出すScheduleExecuterサービス -->
        <service name="AWSGlueScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.aws.AWSGlueScheduleExecutorService"
                 instance="template">
            
            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.AWS_GLUE_CLIENT_BUILDER_SERVICE_NAME">#AWSGlueClientBuilder</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.AWS_GLUE_CLIENT_BUILDER_SERVICE_NAME">
            <!-- AWSGlueClientBuilderサービスのサービス名を設定する -->
            <attribute name="AwsClientBuilderServiceName">${Template.Service.Scheduler2.ScheduleExecutor.AWS_GLUE_CLIENT_BUILDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.AWS_GLUE_CLIENT_BUILDER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- AWSのSageMakerを呼び出すScheduleExecuterサービス -->
        <service name="AWSSageMakerScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.aws.AWSSageMakerScheduleExecutorService"
                 instance="template">
            
            <service-property name="Template.Service.Scheduler2.ScheduleExecutor.AWS_SAGEMAKER_CLIENT_BUILDER_SERVICE_NAME">#AmazonSageMakerClientBuilder</service-property>

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>
<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.AWS_SAGEMAKER_CLIENT_BUILDER_SERVICE_NAME">
            <!-- AmazonSageMakerClientBuilderサービスのサービス名を設定する -->
            <attribute name="AwsClientBuilderServiceName">${Template.Service.Scheduler2.ScheduleExecutor.AWS_SAGEMAKER_CLIENT_BUILDER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.AWS_SAGEMAKER_CLIENT_BUILDER_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- K8Sを呼び出すScheduleExecuterサービス -->
        <service name="KuberneteseScheduleExecutor"
                 code="jp.ossc.nimbus.service.scheduler2.k8s.KuberneteseScheduleExecutorService"
                 instance="template">

<ifdef name="Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME">
            <!-- スケジュール実行時のリクエストIDを取得するContextサービスのサービス名を設定する -->
            <attribute name="ThreadContextServiceName">${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.THREAD_CONTEXT_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME">
            <!-- ScheduleManagerサービスのサービス名を設定する -->
            <attribute name="ScheduleManagerServiceName">${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_MANAGER_SERVICE_NAME}</depends>
</ifdef>
            
            <attribute name="ApiClasses">
                io.kubernetes.client.openapi.apis.AdmissionregistrationV1beta1Api,
                io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api,
                io.kubernetes.client.openapi.apis.ApiregistrationV1Api,
                io.kubernetes.client.openapi.apis.ApiregistrationV1beta1Api,
                io.kubernetes.client.openapi.apis.AppsV1Api,
                io.kubernetes.client.openapi.apis.AppsV1beta1Api,
                io.kubernetes.client.openapi.apis.AppsV1beta2Api,
                io.kubernetes.client.openapi.apis.AuditregistrationV1alpha1Api,
                io.kubernetes.client.openapi.apis.AuthenticationV1Api,
                io.kubernetes.client.openapi.apis.AuthenticationV1beta1Api,
                io.kubernetes.client.openapi.apis.AuthorizationV1Api,
                io.kubernetes.client.openapi.apis.AuthorizationV1beta1Api,
                io.kubernetes.client.openapi.apis.AutoscalingV1Api,
                io.kubernetes.client.openapi.apis.AutoscalingV2beta1Api,
                io.kubernetes.client.openapi.apis.AutoscalingV2beta2Api,
                io.kubernetes.client.openapi.apis.BatchV1Api,
                io.kubernetes.client.openapi.apis.BatchV1beta1Api,
                io.kubernetes.client.openapi.apis.BatchV2alpha1Api,
                io.kubernetes.client.openapi.apis.CertificatesV1beta1Api,
                io.kubernetes.client.openapi.apis.CoordinationV1Api,
                io.kubernetes.client.openapi.apis.CoordinationV1beta1Api,
                io.kubernetes.client.openapi.apis.CoreV1Api,
                io.kubernetes.client.openapi.apis.EventsV1beta1Api,
                io.kubernetes.client.openapi.apis.ExtensionsV1beta1Api,
                io.kubernetes.client.openapi.apis.NetworkingV1Api,
                io.kubernetes.client.openapi.apis.NetworkingV1beta1Api,
                io.kubernetes.client.openapi.apis.NodeV1alpha1Api,
                io.kubernetes.client.openapi.apis.NodeV1beta1Api,
                io.kubernetes.client.openapi.apis.PolicyV1beta1Api,
                io.kubernetes.client.openapi.apis.RbacAuthorizationV1alpha1Api,
                io.kubernetes.client.openapi.apis.RbacAuthorizationV1Api,
                io.kubernetes.client.openapi.apis.RbacAuthorizationV1beta1Api,
                io.kubernetes.client.openapi.apis.SchedulingV1alpha1Api,
                io.kubernetes.client.openapi.apis.SchedulingV1Api,
                io.kubernetes.client.openapi.apis.SchedulingV1beta1Api,
                io.kubernetes.client.openapi.apis.SettingsV1alpha1Api,
                io.kubernetes.client.openapi.apis.StorageV1alpha1Api,
                io.kubernetes.client.openapi.apis.StorageV1Api,
                io.kubernetes.client.openapi.apis.StorageV1beta1Api
            </attribute>
            
        </service>
        
    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleMaker">

        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- 日付キーでスケジュール生成を判断するScheduleMakerサービス -->
        <service name="DateKeyConditionScheduleMaker"
                 code="jp.ossc.nimbus.service.scheduler2.DateKeyConditionScheduleMakerService"
                 instance="template">
            
            <service-property name="Template.Service.Scheduler2.ScheduleMaker.DATE_EVALUATOR_SERVICE_NAME">#GoogleCalendarEventDateEvaluator</service-property>
            
<ifdef name="Template.Service.Scheduler2.ScheduleMaker.DATE_EVALUATOR_SERVICE_NAME">
            <!-- DateEvaluatorサービスのサービス名を設定する -->
            <attribute name="DateEvaluatorServiceName">${Template.Service.Scheduler2.ScheduleMaker.DATE_EVALUATOR_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleMaker.DATE_EVALUATOR_SERVICE_NAME}</depends>
</ifdef>
        </service>
        
        <!-- Googleカレンダーイベント日付評価 -->
        <service name="GoogleCalendarEventDateEvaluator"
                 code="jp.ossc.nimbus.service.scheduler.GoogleCalendarEventDateEvaluatorService"
                 instance="template"/>

        <!-- 業務フローでスケジュール生成を判断するScheduleMakerサービス -->
        <service name="BeanFlowConditionScheduleMaker"
                 code="jp.ossc.nimbus.service.scheduler2.BeanFlowConditionScheduleMakerService"
                 instance="template">

<ifdef name="Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME">
            <!-- BeanFlowInvokerFactoryサービスのサービス名を設定する -->
            <attribute name="BeanFlowInvokerFactoryServiceName">${Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.ScheduleExecutor.BEAN_FLOW_INVOKER_FACTORY_SERVICE_NAME}</depends>
</ifdef>

        </service>

        <!-- SQLでスケジュール生成を判断するScheduleMakerサービス -->
        <service name="DatabaseConditionScheduleMaker"
                 code="jp.ossc.nimbus.service.scheduler2.DatabaseConditionScheduleMakerService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleManager.Default">

        <!-- スケジュールをメモリ中で管理するScheduleManagerサービス -->
        <service name="ScheduleManager"
                 code="jp.ossc.nimbus.service.scheduler2.DefaultScheduleManagerService"
                 instance="template"/>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleManager.DB">

        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>
        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールをデータベースで管理するScheduleManagerサービス -->
        <service name="ScheduleManager"
                 code="jp.ossc.nimbus.service.scheduler2.DatabaseScheduleManagerService"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">#ScheduleIdSequence</service-property>

<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <!-- JDBCコネクションを取得するConnectionFactoryサービスのサービス名を設定する -->
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">
            <!-- スケジュールIDを発番するSequenceサービスのサービス名を設定する -->
            <attribute name="SequenceServiceName">${Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME}</depends>
</ifdef>

<ifdef name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">
            <!-- スケジュール監視機能をクラスタ化するクラスタサービスのサービス名を設定する -->
            <attribute name="ClusterServiceName">${Template.Service.Scheduler2.CLUSTER_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.CLUSTER_SERVICE_NAME}</depends>
</ifdef>

        </service>
    </manager>
    
    <manager name="Template.Service.Scheduler2.ScheduleManager.DB.HSQLDB">

        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>
        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールをデータベースで管理するScheduleManagerサービス -->
        <service template="Template.Service.Scheduler2.ScheduleManager.DB#ScheduleManager"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">#ScheduleIdSequence</service-property>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME" not="true">
            <!-- スケジュールIDを発番するSQLを設定する -->
            <attribute name="NextScheduleIdSelectQuery">select next value for SEQUENCE_SCHEDULE_ID from SCHEDULE_ID_SEQUENCE</attribute>
</ifdef>

        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleManager.DB.JavaDB">

        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>
        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールをデータベースで管理するScheduleManagerサービス -->
        <service template="Template.Service.Scheduler2.ScheduleManager.DB#ScheduleManager"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">#ScheduleIdSequence</service-property>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME" not="true">
            <!-- スケジュールIDを発番するSQLを設定する -->
            <attribute name="NextScheduleIdSelectQuery">VALUES (NEXT VALUE FOR SEQUENCE_SCHEDULE_ID)</attribute>
</ifdef>

            <attribute name="ScheduleMasterTableSchema">
                <object code="jp.ossc.nimbus.service.scheduler2.DatabaseScheduleManagerService$ScheduleMasterTableSchema">
                    <field name="input">INPUT_DATA</field>
                </object>
            </attribute>

            <attribute name="ScheduleTableSchema">
                <object code="jp.ossc.nimbus.service.scheduler2.DatabaseScheduleManagerService$ScheduleTableSchema">
                    <field name="input">INPUT_DATA</field>
                    <field name="output">OUTPUT_DATA</field>
                </object>
            </attribute>

        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleManager.DB.PostgreSQL">

        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>
        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールをデータベースで管理するScheduleManagerサービス -->
        <service template="Template.Service.Scheduler2.ScheduleManager.DB#ScheduleManager"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">#ScheduleIdSequence</service-property>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME" not="true">
            <!-- スケジュールIDを発番するSQLを設定する -->
            <attribute name="NextScheduleIdSelectQuery">SELECT nextval('sequence_schedule_id')</attribute>
</ifdef>

        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.ScheduleManager.DB.MySQL">

        <manager-property name="Template.Service.Scheduler2.CLUSTER_SERVICE_NAME">#Cluster</manager-property>
        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールをデータベースで管理するScheduleManagerサービス -->
        <service template="Template.Service.Scheduler2.ScheduleManager.DB#ScheduleManager"
                 instance="template">

            <service-property name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME">#ScheduleIdSequence</service-property>

<ifdef name="Template.Service.Scheduler2.SCHEDULE_ID_SEQUENCE_SERVICE_NAME" not="true">
            <!-- スケジュールIDを発番するSQLを設定する -->
            <attribute name="NextScheduleIdUpdateQuery">UPDATE SCHEDULE_ID_SEQUENCE SET SEQUENCE_SCHEDULE_ID = LAST_INSERT_ID(SEQUENCE_SCHEDULE_ID + 1)</attribute>
            <attribute name="NextScheduleIdSelectQuery">SELECT LAST_INSERT_ID()</attribute>
</ifdef>
            
            <attribute name="UseConcatFunction">true</attribute>
            
        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.TableCreator.JavaDB">

        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>
        <manager-property name="Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME">APP</manager-property>

        <!-- スケジュールテーブルのSEQUENCEの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SEQUENCE_SCHEDULE_ID'</attribute>
            <attribute name="CreateTableQuery">create SEQUENCE SEQUENCE_SCHEDULE_ID AS INT MAXVALUE 999999 CYCLE</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_MST(
                    ID              VARCHAR(256) not null,
                    TASK_NAME       VARCHAR(256),
                    SCHEDULE_TYPE   VARCHAR(20),
                    INPUT_DATA      VARCHAR(256),
                    START_TIME      CHAR(9) not null,
                    END_TIME        CHAR(9),
                    REPEAT_INTERVAL NUMERIC(18,0),
                    RETRY_INTERVAL  NUMERIC(18,0),
                    RETRY_END_TIME  CHAR(9),
                    MAX_DELAY_TIME  NUMERIC(18,0),
                    ENABLE          CHAR(1) not null,
                    EXECUTOR_KEY    VARCHAR(128),
                    EXECUTOR_TYPE   VARCHAR(128),
                    TEMPLATE        CHAR(1) not null,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_MST values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :TASK_NAME,java.lang.String
                :SCHEDULE_TYPE,java.lang.String
                :INPUT_DATA,java.lang.String
                :START_TIME,java.lang.String
                :END_TIME,java.lang.String
                :REPEAT_INTERVAL,long
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :ENABLE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :TEMPLATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_DEPENDS_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS_MST(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1)
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS_MST values(?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_GROUP_DEPENDS_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS_MST(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID)
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS_MST values(?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_GROUP_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_MST(
                    ID          VARCHAR(256) not null,
                    GROUP_ID    VARCHAR(256) not null,
                    PRIMARY KEY(ID, GROUP_ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_MST values(?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE(
                    ID             VARCHAR(256) NOT NULL,
                    MASTER_ID      VARCHAR(256) NOT NULL,
                    S_DATE         CHAR(8) NOT NULL,
                    S_TIME         CHAR(9) NOT NULL,
                    TASK_NAME      VARCHAR(256),
                    INPUT_DATA     VARCHAR(256),
                    OUTPUT_DATA    VARCHAR(1500),
                    INITIAL_DATE   CHAR(8) NOT NULL,
                    INITIAL_TIME   CHAR(9) NOT NULL,
                    RETRY_INTERVAL NUMERIC(18,0),
                    RETRY_END_TIME CHAR(9),
                    STATE          CHAR(1) DEFAULT 'I' NOT NULL,
                    CONTROL_STATE  CHAR(1) DEFAULT 'I' NOT NULL,
                    EXECUTOR_KEY   VARCHAR(128),
                    EXECUTOR_TYPE  VARCHAR(128),
                    EXEC_S_TIME    CHAR(17),
                    EXEC_E_TIME    CHAR(17),
                    MAX_DELAY_TIME NUMERIC(18,0),
                    CHECK_STATE    CHAR(1) DEFAULT 'I' NOT NULL,
                    ROWVERSION     INTEGER,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :MASTER_ID,java.lang.String
                :S_DATE,java.lang.String
                :S_TIME,java.lang.String
                :TASK_NAME,java.lang.String
                :INPUT_DATA,java.lang.String
                :OUTPUT_DATA,java.lang.String
                :INITIAL_DATE,java.lang.String
                :INITIAL_TIME,java.lang.String
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :STATE,java.lang.String
                :CONTROL_STATE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :EXEC_S_TIME,java.lang.String
                :EXEC_E_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :CHECK_STATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_GROUP'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP(
                    ID              VARCHAR(256) not null,
                    GROUP_ID        VARCHAR(256) not null,
                    MASTER_GROUP_ID VARCHAR(256) not null,
                    ROWVERSION     INTEGER,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID, GROUP_ID, MASTER_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_ID(ID), 
                    FOREIGN KEY FK_SCHEDULE_GROUP_ID(ID) REFERENCES SCHEDULE(ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
                :MASTER_GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_DEPENDS'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INTEGER,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX IDX_SCHEDULE_DEPEND_ID(ID), 
                    FOREIGN KEY FK_SCHEDULE_DEPENDS_ID(ID) REFERENCES SCHEDULE(ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS values(?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from SYS.SYSTABLES as TABLES, SYS.SYSSCHEMAS as SCHEMAS where TABLES.SCHEMAID=SCHEMAS.SCHEMAID and SCHEMAS.SCHEMANAME='${Template.Service.Scheduler2.TableCreator.JavaDB.SCHEMA_NAME}' AND TABLES.TABLENAME='SCHEDULE_GROUP_DEPENDS'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INTEGER,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_DEPENDS_GROUP_ID(GROUP_ID), 
                    FOREIGN KEY FK_GROUP_ID(GROUP_ID) REFERENCES SCHEDULE_GROUP(GROUP_ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">23505</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- CSV形式のストリームとRecordListの相互変換を行うConverterサービス -->
        <service name="RecordListConverter"
                 code="jp.ossc.nimbus.util.converter.RecordListCSVConverter"
                 instance="template">
            <attribute name="IgnoreEmptyLine">true</attribute>
            <attribute name="NullValue">null</attribute>
            <attribute name="CommentPrefix">#</attribute>
            <attribute name="UnescapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="EscapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="Separator">${\t}</attribute>
        </service>

    </manager>

    <manager name="Template.Service.Scheduler2.TableCreator.HSQLDB">

        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールテーブルのSEQUENCEの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_SEQUENCES where SEQUENCE_NAME='SEQUENCE_SCHEDULE_ID'</attribute>
            <attribute name="PreCreateTableQueries">SET WRITE_DELAY FALSE</attribute>
            <attribute name="CreateTableQuery">create sequence SEQUENCE_SCHEDULE_ID as INTEGER start with 1 increment by 1</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールテーブルのスケジュールID用のSEQUENCEテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_ID_SEQUENCE'</attribute>
            <attribute name="CreateTableQuery">create table SCHEDULE_ID_SEQUENCE(SEQUENCE_SCHEDULE_ID INTEGER not null, PRIMARY KEY(SEQUENCE_SCHEDULE_ID))</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_ID_SEQUENCE values(?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :SEQUENCE_SCHEDULE_ID,int
            </attribute>
            <attribute name="InsertRecords">
                1
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <depends>ScheduleSequenceCreator</depends>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_MST(
                    ID              VARCHAR(256) not null,
                    TASK_NAME       VARCHAR(256),
                    SCHEDULE_TYPE   VARCHAR(20),
                    INPUT           VARCHAR(256),
                    START_TIME      CHAR(9) not null,
                    END_TIME        CHAR(9),
                    REPEAT_INTERVAL NUMERIC(18,0),
                    RETRY_INTERVAL  NUMERIC(18,0),
                    RETRY_END_TIME  CHAR(9),
                    MAX_DELAY_TIME  NUMERIC(18,0),
                    ENABLE          CHAR(1) not null,
                    EXECUTOR_KEY    VARCHAR(128),
                    EXECUTOR_TYPE   VARCHAR(128),
                    TEMPLATE        CHAR(1) not null,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_MST values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :TASK_NAME,java.lang.String
                :SCHEDULE_TYPE,java.lang.String
                :INPUT,java.lang.String
                :START_TIME,java.lang.String
                :END_TIME,java.lang.String
                :REPEAT_INTERVAL,long
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :ENABLE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :TEMPLATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_DEPENDS_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS_MST(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    INDEX IDX_SCHEDULE_DEPENDS_MST_ID(ID), 
                    FOREIGN KEY FK_SCHEDULE_DEPENDS_MST_ID(ID) REFERENCES SCHEDULE_MST(ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS_MST values(?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_GROUP_DEPENDS_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS_MST(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_DEPENDS_MST_ID(GROUP_ID), 
                    FOREIGN KEY FK_SCHEDULE_GROUP_DEPENDS_MST_ID(GROUP_ID) REFERENCES SCHEDULE_GROUP_MST(GROUP_ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS_MST values(?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_GROUP_MST'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_MST(
                    ID          VARCHAR(256) not null,
                    GROUP_ID    VARCHAR(256) not null,
                    PRIMARY KEY(ID, GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_ID(ID), 
                    FOREIGN KEY FX_SCHEDULE_GROUP_ID(ID) SCHEDULE_MST(ID) ON DELETE CASCADE
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_MST values(?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE(
                    ID             VARCHAR(256) NOT NULL,
                    MASTER_ID      VARCHAR(256) NOT NULL,
                    S_DATE         CHAR(8) NOT NULL,
                    S_TIME         CHAR(9) NOT NULL,
                    TASK_NAME      VARCHAR(256),
                    INPUT          VARCHAR(256),
                    OUTPUT         VARCHAR(1500),
                    INITIAL_DATE   CHAR(8) NOT NULL,
                    INITIAL_TIME   CHAR(9) NOT NULL,
                    RETRY_INTERVAL NUMERIC(18,0),
                    RETRY_END_TIME CHAR(9),
                    STATE          CHAR(1) DEFAULT 'I' NOT NULL,
                    CONTROL_STATE  CHAR(1) DEFAULT 'I' NOT NULL,
                    EXECUTOR_KEY   VARCHAR(128),
                    EXECUTOR_TYPE  VARCHAR(128),
                    EXEC_S_TIME    CHAR(17),
                    EXEC_E_TIME    CHAR(17),
                    MAX_DELAY_TIME NUMERIC(18,0),
                    CHECK_STATE    CHAR(1) DEFAULT 'I' NOT NULL,
                    ROWVERSION     INTEGER,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :MASTER_ID,java.lang.String
                :S_DATE,java.lang.String
                :S_TIME,java.lang.String
                :TASK_NAME,java.lang.String
                :INPUT,java.lang.String
                :OUTPUT,java.lang.String
                :INITIAL_DATE,java.lang.String
                :INITIAL_TIME,java.lang.String
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :STATE,java.lang.String
                :CONTROL_STATE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :EXEC_S_TIME,java.lang.String
                :EXEC_E_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :CHECK_STATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_GROUP'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP(
                    ID              VARCHAR(256) not null,
                    GROUP_ID        VARCHAR(256) not null,
                    MASTER_GROUP_ID VARCHAR(256) not null,
                    ROWVERSION     INTEGER,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID, GROUP_ID, MASTER_GROUP_ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
                :MASTER_GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_DEPENDS'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INTEGER,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS values(?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">select count(1) from INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_NAME='SCHEDULE_GROUP_DEPENDS'</attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INTEGER,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">-104</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- CSV形式のストリームとRecordListの相互変換を行うConverterサービス -->
        <service name="RecordListConverter"
                 code="jp.ossc.nimbus.util.converter.RecordListCSVConverter"
                 instance="template">
            <attribute name="IgnoreEmptyLine">true</attribute>
            <attribute name="NullValue">null</attribute>
            <attribute name="CommentPrefix">#</attribute>
            <attribute name="UnescapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="EscapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="Separator">${\t}</attribute>
        </service>
    </manager>

    <manager name="Template.Service.Scheduler2.TableCreator.PostgreSQL">

        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールテーブルのSEQUENCEの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    count(1)
                FROM
                    information_schema.sequences
                where
                    SEQUENCE_NAME='sequence_schedule_id'
            </attribute>
<!--
            <attribute name="PreCreateTableQueries">SET WRITE_DELAY FALSE</attribute>
-->
            <attribute name="CreateTableQuery">
                create sequence SEQUENCE_SCHEDULE_ID start 1 increment by 1
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールテーブルのスケジュールID用のSEQUENCEテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_id_sequence'
            </attribute>
            <attribute name="CreateTableQuery">
                create table
                SCHEDULE_ID_SEQUENCE(
                    SEQUENCE_SCHEDULE_ID BIGINT not null,
                    PRIMARY KEY(SEQUENCE_SCHEDULE_ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_ID_SEQUENCE values(?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :SEQUENCE_SCHEDULE_ID,int
            </attribute>
            <attribute name="InsertRecords">
                1
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <depends>ScheduleSequenceCreator</depends>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_mst'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_MST(
                    ID              VARCHAR(256) not null,
                    TASK_NAME       VARCHAR(256),
                    SCHEDULE_TYPE   VARCHAR(20),
                    INPUT           TEXT,
                    START_TIME      CHAR(9) not null,
                    END_TIME        CHAR(9),
                    REPEAT_INTERVAL BIGINT,
                    RETRY_INTERVAL  BIGINT,
                    RETRY_END_TIME  CHAR(9),
                    MAX_DELAY_TIME  BIGINT,
                    ENABLE          CHAR(1) not null,
                    EXECUTOR_KEY    VARCHAR(128),
                    EXECUTOR_TYPE   VARCHAR(128),
                    TEMPLATE        CHAR(1) not null,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_MST values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :TASK_NAME,java.lang.String
                :SCHEDULE_TYPE,java.lang.String
                :INPUT,java.lang.String
                :START_TIME,java.lang.String
                :END_TIME,java.lang.String
                :REPEAT_INTERVAL,long
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :ENABLE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :TEMPLATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_depends_mst'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS_MST(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS_MST values(?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_group_depends_mst'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS_MST(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS_MST values(?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_group_mst'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_MST(
                    ID          VARCHAR(256) not null,
                    GROUP_ID    VARCHAR(256) not null,
                    PRIMARY KEY(ID, GROUP_ID)
                )
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_MST values(?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE(
                    ID             VARCHAR(256) NOT NULL,
                    MASTER_ID      VARCHAR(256) NOT NULL,
                    S_DATE         CHAR(8) NOT NULL,
                    S_TIME         CHAR(9) NOT NULL,
                    TASK_NAME      VARCHAR(256),
                    INPUT          TEXT,
                    OUTPUT         TEXT,
                    INITIAL_DATE   CHAR(8) NOT NULL,
                    INITIAL_TIME   CHAR(9) NOT NULL,
                    RETRY_INTERVAL BIGINT,
                    RETRY_END_TIME CHAR(9),
                    STATE          CHAR(1) DEFAULT 'I' NOT NULL,
                    CONTROL_STATE  CHAR(1) DEFAULT 'I' NOT NULL,
                    EXECUTOR_KEY   VARCHAR(128),
                    EXECUTOR_TYPE  VARCHAR(128),
                    EXEC_S_TIME    CHAR(17),
                    EXEC_E_TIME    CHAR(17),
                    MAX_DELAY_TIME BIGINT,
                    CHECK_STATE    CHAR(1) DEFAULT 'I' NOT NULL,
                    ROWVERSION     INT,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :MASTER_ID,java.lang.String
                :S_DATE,java.lang.String
                :S_TIME,java.lang.String
                :TASK_NAME,java.lang.String
                :INPUT,java.lang.String
                :OUTPUT,java.lang.String
                :INITIAL_DATE,java.lang.String
                :INITIAL_TIME,java.lang.String
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :STATE,java.lang.String
                :CONTROL_STATE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :EXEC_S_TIME,java.lang.String
                :EXEC_E_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :CHECK_STATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_group'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP(
                    ID              VARCHAR(256) not null,
                    GROUP_ID        VARCHAR(256) not null,
                    MASTER_GROUP_ID VARCHAR(256) not null,
                    ROWVERSION     INT,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID, GROUP_ID, MASTER_GROUP_ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
                :MASTER_GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_depends'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_DEPENDS(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INT,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS values(?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT
                    COUNT(1)
                FROM
                    PG_STAT_USER_TABLES
                WHERE
                    RELNAME = 'schedule_group_depends'
            </attribute>
            <attribute name="CreateTableQuery">
                create table SCHEDULE_GROUP_DEPENDS(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INT,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID)
                )
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">0</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- CSV形式のストリームとRecordListの相互変換を行うConverterサービス -->
        <service name="RecordListConverter"
                 code="jp.ossc.nimbus.util.converter.RecordListCSVConverter"
                 instance="template">
            <attribute name="IgnoreEmptyLine">true</attribute>
            <attribute name="NullValue">null</attribute>
            <attribute name="CommentPrefix">#</attribute>
            <attribute name="UnescapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="EscapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="Separator">${\t}</attribute>
        </service>
    </manager>

    <manager name="Template.Service.Scheduler2.TableCreator.MySQL">

        <manager-property name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">#ConnectionFactory</manager-property>

        <!-- スケジュールテーブルのスケジュールID用のSEQUENCEテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleSequenceTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_ID_SEQUENCE' 
                LIMIT 1
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_ID_SEQUENCE(
                    SEQUENCE_SCHEDULE_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_ID_SEQUENCE values(?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :SEQUENCE_SCHEDULE_ID,int
            </attribute>
            <attribute name="InsertRecords">
                1
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_ID_SEQUENCE</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_ID_SEQUENCE</attribute>
            <depends>RecordListConverter</depends>
        </service>
        
        <!-- スケジュールマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_MST' 
                LIMIT 1
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_MST(
                    ID              VARCHAR(256) not null,
                    TASK_NAME       VARCHAR(256),
                    SCHEDULE_TYPE   VARCHAR(20),
                    INPUT           TEXT,
                    START_TIME      CHAR(9) not null,
                    END_TIME        CHAR(9),
                    REPEAT_INTERVAL BIGINT,
                    RETRY_INTERVAL  BIGINT,
                    RETRY_END_TIME  CHAR(9),
                    MAX_DELAY_TIME  BIGINT,
                    ENABLE          CHAR(1) not null,
                    EXECUTOR_KEY    VARCHAR(128),
                    EXECUTOR_TYPE   VARCHAR(128),
                    TEMPLATE        CHAR(1) not null,
                    PRIMARY KEY(ID),
                    INDEX IDX_SCHEDULE_MST_ID(ID)
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_MST values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :TASK_NAME,java.lang.String
                :SCHEDULE_TYPE,java.lang.String
                :INPUT,java.lang.String
                :START_TIME,java.lang.String
                :END_TIME,java.lang.String
                :REPEAT_INTERVAL,long
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :ENABLE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :TEMPLATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_MST</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_MST</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_DEPENDS_MST' 
                LIMIT 1              
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_DEPENDS_MST(
                    DUMMY_ID         VARCHAR(256) not null,
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    PRIMARY KEY(DUMMY_ID),
                    INDEX IDX_SCHEDULE_DEPENDS_MST_ID(ID),
                    FOREIGN KEY FK_SCHEDULE_DEPENDS_MST_ID(ID) REFERENCES SCHEDULE_MST(ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS_MST values(?,?,?,?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :DUMMY_ID,java.lang.String
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_DEPENDS_MST</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_DEPENDS_MST</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleMasterTableCreator</depends>
        </service>

        <!-- スケジュールグループマスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_GROUP_MST'
                LIMIT 1       
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_GROUP_MST(
                    ID          VARCHAR(256) not null,
                    GROUP_ID    VARCHAR(256) not null,
                    PRIMARY KEY(ID, GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_MST_ID(ID),
                    INDEX IDX_SCHEDULE_GROUP_MST_GROUP_ID(GROUP_ID),
                    FOREIGN KEY FK_SCHEDULE_GROUP_MST_ID(ID) REFERENCES SCHEDULE_MST(ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_MST values(?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_GROUP_MST</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_GROUP_MST</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleMasterTableCreator</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsMasterTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_GROUP_DEPENDS_MST' 
                LIMIT 1  
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS_MST(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_DEPENDS_MST_GROUP_ID(GROUP_ID),
                    FOREIGN KEY FK_SCHEDULE_GROUP_DEPENDS_MST_GROUP_ID(GROUP_ID) REFERENCES SCHEDULE_GROUP_MST(GROUP_ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS_MST values(?,?,?)</attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS_MST</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS_MST</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleGroupMasterTableCreator</depends>
        </service>

        <!-- スケジュールテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE'
                LIMIT 1  
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE(
                    ID             VARCHAR(256) NOT NULL,
                    MASTER_ID      VARCHAR(256) NOT NULL,
                    S_DATE         CHAR(8) NOT NULL,
                    S_TIME         CHAR(9) NOT NULL,
                    TASK_NAME      VARCHAR(256),
                    INPUT          TEXT,
                    OUTPUT         TEXT,
                    INITIAL_DATE   CHAR(8) NOT NULL,
                    INITIAL_TIME   CHAR(9) NOT NULL,
                    RETRY_INTERVAL BIGINT,
                    RETRY_END_TIME CHAR(17),
                    STATE          CHAR(1) DEFAULT 'I' NOT NULL,
                    CONTROL_STATE  CHAR(1) DEFAULT 'I' NOT NULL,
                    EXECUTOR_KEY   VARCHAR(128),
                    EXECUTOR_TYPE  VARCHAR(128),
                    EXEC_S_TIME    CHAR(17),
                    EXEC_E_TIME    CHAR(17),
                    MAX_DELAY_TIME BIGINT,
                    CHECK_STATE    CHAR(1) DEFAULT 'I' NOT NULL,
                    ROWVERSION     INT,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID),
                    INDEX IDX_SCHEDULE_ID(ID),
                    INDEX IDX_SCHEDULE_MASTER_ID(MASTER_ID),
                    INDEX IDX_SCHEDULE_EXECUTOR_KEY(EXECUTOR_KEY),
                    INDEX IDX_SCHEDULE_EXECUTOR_TYPE(EXECUTOR_TYPE),
                    INDEX IDX_SCHEDULE_STATE(STATE)
                 ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :MASTER_ID,java.lang.String
                :S_DATE,java.lang.String
                :S_TIME,java.lang.String
                :TASK_NAME,java.lang.String
                :INPUT,java.lang.String
                :OUTPUT,java.lang.String
                :INITIAL_DATE,java.lang.String
                :INITIAL_TIME,java.lang.String
                :RETRY_INTERVAL,long
                :RETRY_END_TIME,java.lang.String
                :STATE,java.lang.String
                :CONTROL_STATE,java.lang.String
                :EXECUTOR_KEY,java.lang.String
                :EXECUTOR_TYPE,java.lang.String
                :EXEC_S_TIME,java.lang.String
                :EXEC_E_TIME,java.lang.String
                :MAX_DELAY_TIME,long
                :CHECK_STATE,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">long</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="BIGINT"/></argument>
            </invoke>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE</attribute>
            <depends>RecordListConverter</depends>
        </service>

        <!-- スケジュールグループテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_GROUP'
                LIMIT 1;  
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_GROUP(
                    ID              VARCHAR(256) not null,
                    GROUP_ID        VARCHAR(256) not null,
                    MASTER_GROUP_ID VARCHAR(256) not null,
                    ROWVERSION     INT,
                    UPDATEUSERID   VARCHAR(256),
                    UPDATETIME     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(ID, GROUP_ID, MASTER_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_ID(ID),
                    INDEX IDX_SCHEDULE_GROUP_GROUP_ID(GROUP_ID),
                    FOREIGN KEY FK_SCHEDULE_GROUP_ID(ID) REFERENCES SCHEDULE(ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :GROUP_ID,java.lang.String
                :MASTER_GROUP_ID,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_GROUP</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_GROUP</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleTableCreator</depends>
        </service>

        <!-- スケジュール依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
                SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_DEPENDS'
                LIMIT 1  
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_DEPENDS(
                    ID               VARCHAR(256) not null,
                    DEPENDS_ID       VARCHAR(256),
                    DEPENDS_GROUP_ID VARCHAR(256),
                    GROUP_ID         VARCHAR(256),
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INT,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX IDX_SCHEDULE_DEPENDS_ID(ID),
                    INDEX IDX_SCHEDULE_DEPENDS_DEPENDS_ID(DEPENDS_ID),
                    INDEX IDX_SCHEDULE_DEPENDS_DEPENDS_GROUP_ID(DEPENDS_GROUP_ID),
                    INDEX IDX_SCHEDULE_DEPENDS_GROUP_ID(GROUP_ID),
                    INDEX IDX_SCHEDULE_DEPENDS_IGNORE_ERROR(IGNORE_ERROR),
                    FOREIGN KEY FK_SCHEDULE_DEPENDS_ID(ID) REFERENCES SCHEDULE(ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_DEPENDS values(?,?,?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :ID,java.lang.String
                :DEPENDS_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <invoke name="setSqlType">
                <argument type="java.lang.Class">java.lang.String</argument>
                <argument type="int"><static-field-ref code="java.sql.Types" name="VARCHAR"/></argument>
            </invoke>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_DEPENDS</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_DEPENDS</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleTableCreator</depends>
        </service>

        <!-- スケジュールグループ依存マスタテーブルの準備をするTableCreatorサービス -->
        <service name="ScheduleGroupDependsTableCreator"
                 code="jp.ossc.nimbus.service.connection.TableCreatorService"
                 instance="template">
<ifdef name="Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME">
            <attribute name="ConnectionFactoryServiceName">${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</attribute>
            <depends>${Template.Service.Scheduler2.Connection.CONNECTION_FACTORY_SERVICE_NAME}</depends>
</ifdef>
            <attribute name="RecordListConverterServiceName">#RecordListConverter</attribute>
            <attribute name="ExistsTableQuery">
               SELECT 
                    count(1) 
                FROM 
                    information_schema.tables 
                WHERE 
                    table_schema='${MYSQL_DB}' AND table_name ='SCHEDULE_GROUP_DEPENDS'
                LIMIT 1 
            </attribute>
            <attribute name="CreateTableQuery">
                create table ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS(
                    GROUP_ID         VARCHAR(256) not null,
                    DEPENDS_GROUP_ID VARCHAR(256) not null,
                    IGNORE_ERROR     CHAR(1),
                    ROWVERSION       INT,
                    UPDATEUSERID     VARCHAR(256),
                    UPDATETIME       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY(GROUP_ID, DEPENDS_GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_DEPENDS_GROUP_ID(GROUP_ID),
                    INDEX IDX_SCHEDULE_GROUP_DEPENDS_IGNORE_ERROR(IGNORE_ERROR),
                    FOREIGN KEY FK_SCHEDULE_GROUP_DEPENDS_GROUP_ID(GROUP_ID) REFERENCES SCHEDULE_GROUP(GROUP_ID) ON DELETE CASCADE
                ) DEFAULT CHARSET=utf8mb4
            </attribute>
            <attribute name="CreateTableOnStart">true</attribute>
            <attribute name="InsertQuery">insert into SCHEDULE_GROUP_DEPENDS values(?,?,?,1,'TEST',CURRENT_TIMESTAMP)</attribute>
            <attribute name="InsertOnStart">true</attribute>
            <attribute name="RecordListSchema">
                :GROUP_ID,java.lang.String
                :DEPENDS_GROUP_ID,java.lang.String
                :IGNORE_ERROR,java.lang.String
            </attribute>
            <attribute name="IgnoreSQLExceptionErrorCodeOnInsert">1062</attribute>
            <attribute name="DeleteQuery">DELETE FROM ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS</attribute>
            <attribute name="DropTableQuery">DROP TABLE ${MYSQL_DB}.SCHEDULE_GROUP_DEPENDS</attribute>
            <depends>RecordListConverter</depends>
            <depends>ScheduleGroupTableCreator</depends>
        </service>

        <!-- CSV形式のストリームとRecordListの相互変換を行うConverterサービス -->
        <service name="RecordListConverter"
                 code="jp.ossc.nimbus.util.converter.RecordListCSVConverter"
                 instance="template">
            <attribute name="IgnoreEmptyLine">true</attribute>
            <attribute name="NullValue">null</attribute>
            <attribute name="CommentPrefix">#</attribute>
            <attribute name="UnescapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="EscapeLineSeparatorInEnclosure">true</attribute>
            <attribute name="Separator">${\t}</attribute>
        </service>
    </manager>

</server>