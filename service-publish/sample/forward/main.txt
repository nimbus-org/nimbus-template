import jp.ossc.nimbus.core.*;
import jp.ossc.nimbus.service.publish.*;

ServerConnectionFactory scf = ServiceManagerFactory.getServiceObject("Sample.Service.Publish.Server", "ConnectionFactory");
ServerConnection sc = scf.getServerConnection();

print("サーバ：クライアント数=" + sc.getClientCount());

ClientConnectionFactory ccf = ServiceManagerFactory.getServiceObject("Sample.Service.Publish.Client", "ClusterClientConnectionFactory");
ClientConnection[] clients = new ClientConnection[5];
for(int i = 0; i < clients.length; i++){
    clients[i] = ccf.getClientConnection();
    clients[i].connect();
    clients[i].addSubject("test");
    final int id = i;
    clients[i].setMessageListener(
        new MessageListener(){
            public void onMessage(Message message){
                print("クライアント" + id + "：メッセージを受信しました : " + message.getObject());
            }
        }
    );
    clients[i].startReceive();
    print("クライアント" + id + "：受信を開始しました。");
}

Thread.sleep(1000l);

print("サーバ：クライアント数=" + sc.getClientCount());
Message message = sc.createMessage("test", null);
message.setObject("こんにちは");
print("サーバ：メッセージを同期送信します : " + message.getObject());
long start1 = System.currentTimeMillis();
sc.send(message);
print("サーバ：メッセージを同期送信しました : " + (System.currentTimeMillis() - start1) + "[ms]");

Thread.sleep(1000l);
for(int i = 0; i < clients.length; i++){
    clients[i].close();
}

return "終了";